<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>distributed-system on std::bodun::blog</title><link>https://www.bodunhu.com/blog/tags/distributed-system/</link><description>Recent content in distributed-system on std::bodun::blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 05 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bodunhu.com/blog/tags/distributed-system/index.xml" rel="self" type="application/rss+xml"/><item><title>Fault Tolerance in Distributed Systems</title><link>https://www.bodunhu.com/blog/posts/fault-tolerance-in-distributed-systems/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/fault-tolerance-in-distributed-systems/</guid><description>No systems can provide fault-free guarantees, including distributed systems. However, failures in distributed systems are &lt;em>independent&lt;/em>. It means only a subset of processes fail at once. We can exploit this feature and provide some degree of fault tolerance. The problem is, fault tolerance makes everything else much more difficult.</description></item><item><title>Consistency Models Explained</title><link>https://www.bodunhu.com/blog/posts/consistency-models-explained/</link><pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/consistency-models-explained/</guid><description>In a distributed system, eventual consistency provides a weak guarantee that data updates will be reflected in all nodes eventually. However, the downside of eventual consistency is that clients could potentially observe awkward intermediate states</description></item><item><title>Lamport Distributed Mutual Exclusion</title><link>https://www.bodunhu.com/blog/posts/lamport-distributed-mutual-exclusion/</link><pubDate>Tue, 21 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/lamport-distributed-mutual-exclusion/</guid><description>Normally, having consistent event ordering in a distributed system is hard because we have no common clock. Since we don&amp;rsquo;t have a common clock to measure with, we rely on logical properties of time in the absence of clock. Here we use causality replation between events</description></item><item><title>Specifying Token Ring for Mutual Exclusion</title><link>https://www.bodunhu.com/blog/posts/specifying-token-ring-for-mutual-exclusion/</link><pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/specifying-token-ring-for-mutual-exclusion/</guid><description>Mutual exclusion is a common term appearing frequently in computer sciences. In essence, it&amp;rsquo;s a mechanism of concurrency control allowing exclusive access to some resource (or &amp;ldquo;critical region&amp;rdquo;). Token passing is an algorithm for distributed mutual exclusion and will be our focus in this post</description></item><item><title>Writing Specifications in a Distributed System using Ivy</title><link>https://www.bodunhu.com/blog/posts/writing-specifications-in-a-distributed-system-using-ivy/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/writing-specifications-in-a-distributed-system-using-ivy/</guid><description>Before we jump into how to write specifications in a distributed setting, we first define what a specification is. I take the definition from the magnificent &lt;a href="http://mcmil.net/wordpress/" target="_blank" rel="noopener">Ken McMillan&lt;/a>: a specification is a &lt;em>statement&lt;/em></description></item><item><title>Whiz: Data-Driven Analytics Execution</title><link>https://www.bodunhu.com/blog/posts/whiz-data-driven-analytics-execution/</link><pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/whiz-data-driven-analytics-execution/</guid><description>This paper by &lt;a href="https://utns.cs.utexas.edu/" target="_blank" rel="noopener">UTNS&lt;/a> lab appeared in &lt;a href="https://www.usenix.org/conference/nsdi21" target="_blank" rel="noopener">NSDI 2021&lt;/a>. It presents a data-analytics framework that decouples intermediate data from computations</description></item><item><title>What is Memcached</title><link>https://www.bodunhu.com/blog/posts/what-is-memcached/</link><pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/what-is-memcached/</guid><description>Memcached is a high-performance, distributed caching system. Although application-neutral, it&amp;rsquo;s most commonly used to speed up dynamic Web applications by alleviating database load. Memcached is used on LiveJournal, Slashdot, Wikipedia and other high-traffic sites</description></item></channel></rss>