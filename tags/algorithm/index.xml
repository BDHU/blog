<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algorithm on std::bodun::blog</title><link>https://www.bodunhu.com/blog/tags/algorithm/</link><description>Recent content in algorithm on std::bodun::blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 21 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bodunhu.com/blog/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>How SAT Solver works</title><link>https://www.bodunhu.com/blog/posts/how-sat-solver-works/</link><pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/how-sat-solver-works/</guid><description>This is a summary over the high-level design of &lt;a href="https://en.wikipedia.org/wiki/Boolean_satisfiability_problem" target="_blank" rel="noopener">SAT solver&lt;/a> covered in Prof. &lt;a href="https://www.cs.utexas.edu/~isil/" target="_blank" rel="noopener">Dillig&lt;/a>&amp;rsquo;s &lt;a href="https://www.cs.utexas.edu/~isil/cs389L/" target="_blank" rel="noopener">Automated Logical Reasoning&lt;/a> class. It&amp;rsquo;s meant to cover the basic steps towards determining whether a given boolean formula is satisfiable or not</description></item><item><title>Hoare Logic</title><link>https://www.bodunhu.com/blog/posts/hoare-logic/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/hoare-logic/</guid><description>Hoare logic forms the basis of all deductive verification. To illustrate Hoare logic, we will first consider a smaller imperative programming language &lt;strong>IMP&lt;/strong></description></item><item><title>Congruence Closure</title><link>https://www.bodunhu.com/blog/posts/congruence-closure/</link><pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/congruence-closure/</guid><description>This is a summary of how to compute congruence closure. I implemented the algorithm to compute congruence closure and thought I&amp;rsquo;d never forget it. But my memory starts to get blurry just after two days. So I figured I&amp;rsquo;d put things down so I don&amp;rsquo;t have to watch the entire lecture again the next time I need it</description></item><item><title>Performance Anomaly of 802.11b</title><link>https://www.bodunhu.com/blog/posts/performance-anomaly-of-802.11b/</link><pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/performance-anomaly-of-802.11b/</guid><description>This research is conducted by Martin Heusse, Franck Rousseau, Cilles Berger-Sabbatel, Andrzej Duda on analyzing the performance of the IEEE 802.11b wireless local area networks. Degraded transmitting rate is caused by CSMA/CA channel access method</description></item><item><title>Singular Value Decomposition</title><link>https://www.bodunhu.com/blog/posts/singular-value-decomposition/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/singular-value-decomposition/</guid><description>Unitary matrices and the Singular Value Decomposition (SVD) are two important concepts in linear algebra. In order to fully understand these concepts, we will need to first discuss orthogonality. Most materials are converted in Advanced Linear Algebra: Foundations to Frontiers taught by professor &lt;a href="https://www.cs.utexas.edu/~rvdg/" target="_blank" rel="noopener">Robert van de Geijn&lt;/a>. This is a brief summary over the important concepts covered in Chapter 2</description></item><item><title>Understanding Probabilistic Clock Synchronization</title><link>https://www.bodunhu.com/blog/posts/understanding-probabilistic-clock-synchronization/</link><pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/understanding-probabilistic-clock-synchronization/</guid><description>This post is meant to discuss the probabilistic clock synchronization technique. The main goal of this technique is to bound the difference between systems by setting up an upper bound. Formally, we define the problem as \(|P(t)-Q(t)|\leq \varepsilon\), or the difference between clocks across the network. We will go over the technical detains and discuss what these symbols represent in later sections. Most of these materials are from Prof. Mok&amp;rsquo;s slides on dependable systems classes.</description></item></channel></rss>