<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>PL on std::bodun::blog</title>
    <link>https://www.bodunhu.com/blog/tags/pl/</link>
    <description>Recent content in PL on std::bodun::blog</description>
    <image>
      <url>https://www.bodunhu.com/blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.bodunhu.com/blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 17 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bodunhu.com/blog/tags/pl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hoare Logic</title>
      <link>https://www.bodunhu.com/blog/posts/hoarelogic/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/hoarelogic/</guid>
      <description>Hoare logic forms the basis of all deductive verification. To illustrate Hoare logic, we will first consider a smaller imperative programming language IMP.</description>
    </item>
    
    <item>
      <title>Congruence Closure</title>
      <link>https://www.bodunhu.com/blog/posts/congruence_closure/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/congruence_closure/</guid>
      <description>This is a summary of how to compute congruence closure. I implemented the algorithm to compute congruence closure and thought I’d never forget it. But my memory starts to get blurry just after two days. So I figured I’d put things down so I don’t have to watch the entire lecture again the next time I need it.</description>
    </item>
    
    <item>
      <title>Monads in Haskell</title>
      <link>https://www.bodunhu.com/blog/posts/monad/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/monad/</guid>
      <description>I&amp;rsquo;ve scratched my head for quite a while trying to understand the concept of monad in Haskell. This is a brief summary of monads. I take William Cook&amp;rsquo;s Anatomy of Programming Languages as my reference.
 Definitions of Monads A monad is defined as a computational structure that involves three parts:
 A generic data type \(m\) A return function \(return_m\) :: \(t\rightarrow mt\) A bind function \(\triangleright_mt\rightarrow (t\rightarrow ms)\rightarrow ms\)  Here the symbol \(m\) gives the name of the monad as well as the shape of the computation.</description>
    </item>
    
  </channel>
</rss>
