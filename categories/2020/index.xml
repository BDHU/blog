<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2020 on std::bodun::blog</title>
    <link>https://www.bodunhu.com/blog/categories/2020/</link>
    <description>Recent content in 2020 on std::bodun::blog</description>
    <image>
      <url>https://www.bodunhu.com/blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.bodunhu.com/blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 03 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bodunhu.com/blog/categories/2020/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Program Loading and Memory Mapping in Linux</title>
      <link>https://www.bodunhu.com/blog/posts/programloadingandmemorymappinginlinux/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/programloadingandmemorymappinginlinux/</guid>
      <description>The goal here is to familiarize yourself with how programs are loaded, dynamically paged, and some of the mechanics of signal handling and memory mapping in Linux.
 execve Syscall The operating system, as one of itsd basic services, loads programs into memory for them to execute. Programs rely on execve syscall to get the OS to load the program into memory and start it executing as a process. The kernel version we used to testing is 5.</description>
    </item>
    
    <item>
      <title>Scheduler Activation</title>
      <link>https://www.bodunhu.com/blog/posts/scheduleractivation/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/scheduleractivation/</guid>
      <description>What is a thread? A thread of execution is the smallest sequence of programmed instructions that can be managed independently by a scheduler.
Kernel Level Threads Pros/Cons  Good functionality, system wide integration Threads are seen and scheduled only by the kernel. A lot of kernel information should be invisible to user thread and can be useful for scheduling Poor performance, every thread_related call traps. This situation is a lot worse in the 1990s than it is now mainly due to clock speed.</description>
    </item>
    
    <item>
      <title>Add MathJax v3 Support to Jekyll and Hugo</title>
      <link>https://www.bodunhu.com/blog/posts/mathjaxjekyll/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/mathjaxjekyll/</guid>
      <description>I was using Mathjax v2 for a while and I heard v3 perform significantly better than v2. Many great tutorials explains explains how to add Mathjax support to Jekyll websites. Some of them only cover Mathjax v2. So here is the brief summary on how to add Mathjax v3 support to your Jekyll website (Recently I&amp;rsquo;ve migrated to Hugo but adding support to Hugo is also pretty similar).
  In the _config.</description>
    </item>
    
    <item>
      <title>Linux Program Measurement and mmap</title>
      <link>https://www.bodunhu.com/blog/posts/linuxkernelmeasurementandmmap/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/linuxkernelmeasurementandmmap/</guid>
      <description>This is a summary over Linux kernel program measurement and mmap. The specs of our experiment environment is listed below. For more details regarding the CPU spec please refer to cpu world. This is the system spec:
   Attribute Value     Processor name (BIOS) Intel(R) Core(TM) i7-6800K CPU @ 3.40GHz   Cores 6   Logical processors 12   TLB/Cache details 64-byte Prefetching Data TLB: 1-GB pages, 4-way set associative, 4 entries Data TLB: 4-KB Pages, 4-way set associative, 64 entries Instruction TLB: 4-KByte pages, 8-way set associative, 64 entries L2 TLB: 1-MB, 4-way set associative, 64-byte line size Shared 2nd-Level TLB: 4-KB / 2-MB pages, 6-way associative, 1536 entries.</description>
    </item>
    
    <item>
      <title>Memory Resource Management in VMware ESX Server</title>
      <link>https://www.bodunhu.com/blog/posts/vmwareesxserver/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/vmwareesxserver/</guid>
      <description>VMWare ESX Server is a software layer designed to multiplex hardware resources among virtual machines running unmodified commodity operating systems. ESX Server, different to VMware Workstation, is a type 1 hypervisor, which means it runs directly on bare metal. ESX Server focuses on running guest VMs without modifying the guest OSes at all, which is challenging.
  Memory Virtualization is done by interposing an extra abstraction layer between a physical address from the VM&amp;rsquo;s point of view, and a machine address which represents the actual hardware memory.</description>
    </item>
    
    <item>
      <title>Xen and the Art of Virtualization</title>
      <link>https://www.bodunhu.com/blog/posts/xenvirtualization/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/xenvirtualization/</guid>
      <description>Xen is an x86 virtual machine monitor which allows multiple commodity operating systems to share conventional hardware in a safe and resource managed fashion, without sacrificing either performance or functionality. Xen is type I hypervisor, which directly runs on top of bare metal.
 paravirtualization - presents a virtual machine abstraction that is similar but not identical to the underlying hardware.
  The Virtual Machine Interface Memory is hard to virtualize mostly because x86 doesn&amp;rsquo;t support software-managed TLB.</description>
    </item>
    
    <item>
      <title>Start Linux Kernel Hacking</title>
      <link>https://www.bodunhu.com/blog/posts/kernelhacking/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/kernelhacking/</guid>
      <description>This is a summary of how to compile and boot the Linux kernel on the KVM-qemu virtual machine. It covers how to get a VM running in KVM, how to build a customized kernel, and how to use GDB with the Linux kernel. The experiment is conducted on an amd64 architecture CPU. We use Ubuntu as our testing environment but the steps covered here should apply to other distros as well.</description>
    </item>
    
    <item>
      <title>Performance Anamoly of 802.11b</title>
      <link>https://www.bodunhu.com/blog/posts/wireless_anomaly/</link>
      <pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/wireless_anomaly/</guid>
      <description>This research is conducted by Martin Heusse, Franck Rousseau, Cilles Berger-Sabbatel, Andrzej Duda on analyzing the performance of the IEEE 802.11b wireless local area networks. Degraded transmitting rate is caused by CSMA/CA channel access method.
 Overview The performance of the IEEE 802.11b wireless local area networks have degraded performances when some mobile hosts use a lower bit rate than the others, which is caused by CSMA/CA channel access method. When one host changes it modulation type which degrades bit rate, it occupies the channel for a longer time, causing other hosts still using higher bit rate to be penalized.</description>
    </item>
    
    <item>
      <title>Exokernel</title>
      <link>https://www.bodunhu.com/blog/posts/exokernel/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/exokernel/</guid>
      <description>Exokernel is a term every system researcher has heard of at some point in life. However, according to the PDOS group at MIT, there aren&amp;rsquo;t any exokernel-based operating systems in active use today. It&amp;rsquo;s interesting to discover what ideas exokernels brought to the OS high-level design and some potential drawbacks of such design choice.
 Perhaps the most important thing to keep in mind is that exokernel operating system architecture pushes management of physical resources to the application level, contrary to what most monolithic kernel would do: providing hardware resource management through some form of abstraction, usually hiding hardware-related details.</description>
    </item>
    
    <item>
      <title>Sketch on the UNIX Timesharing System</title>
      <link>https://www.bodunhu.com/blog/posts/unix/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/unix/</guid>
      <description>Unix is general-purpose, multi-user, interactive operating system, it offers several new features hardly found in other larger operating systems back in the day. These features include (1) a hierarchical file system incorporating demountable volumes; (2) compatible file, device, and inter-process I/O; (3) the ability to initiate asynchronous processes; (4) system command language selectable on a per-user basis; and (5) over 100 subsystems including a dozen languages.
 Simplicity at its Core Simplicity was engraved into the gene of Unix since its birth, as the paper states: &amp;ldquo;Perhaps the most important achievement of UNIX is to demonstrate that a powerful operating system for interactive use need not be expensive either in equipment or in human effort&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Monads in Haskell</title>
      <link>https://www.bodunhu.com/blog/posts/monad/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/monad/</guid>
      <description>I&amp;rsquo;ve scratched my head for quite a while trying to understand the concept of monad in Haskell. This is a brief summary of monads. I take William Cook&amp;rsquo;s Anatomy of Programming Languages as my reference.
 Definitions of Monads A monad is defined as a computational structure that involves three parts:
 A generic data type \(m\) A return function \(return_m\) :: \(t\rightarrow mt\) A bind function \(\triangleright_mt\rightarrow (t\rightarrow ms)\rightarrow ms\)  Here the symbol \(m\) gives the name of the monad as well as the shape of the computation.</description>
    </item>
    
    <item>
      <title>Singular Value Decomposition</title>
      <link>https://www.bodunhu.com/blog/posts/svd/</link>
      <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bodunhu.com/blog/posts/svd/</guid>
      <description>Unitary matrices and the Singular Value Decomposition (SVD) are two important concepts in linear algebra. In order to fully understand these concepts, we will need to first discuss orthogonality. Most materials are convered in Advanced Linear Algebra: Foundations to Frontiers taught by professor Robert van de Geijn. This is a brief summary over the important concepts covered in Chapter 2.
 Components in the direction of a vector By Pythagorean theorem, we know that \(b = \chi a + c\) where \(a\) is a unit vector orthogonal to \(c\) and \(\chi\) is a scaler.</description>
    </item>
    
  </channel>
</rss>
