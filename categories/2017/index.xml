<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2017 on std::bodun::blog</title><link>https://www.bodunhu.com/blog/categories/2017/</link><description>Recent content in 2017 on std::bodun::blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Nov 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bodunhu.com/blog/categories/2017/index.xml" rel="self" type="application/rss+xml"/><item><title>Networks</title><link>https://www.bodunhu.com/blog/posts/networks/</link><pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/networks/</guid><description>The concept of a worldwide of networks of information was introduced long before the technology used to build the internet. The first workable prototype came in the late 1960s with the creation of ARPANET(The Advanced Research Projects Agency Network). The famous TCP/IP, or Transmission Control Protocol and Internet Protocol, was developed by Robert Kahn and Vinton Cerf in the 1970s. In the 1980s, research by Tim Berners-Lee gave birth to the World Wide Web, linking hypertext documents into an information system, making them accessible from any node on the network (History of Internet).</description></item><item><title>File System Design</title><link>https://www.bodunhu.com/blog/posts/file-system-design/</link><pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/file-system-design/</guid><description>What exactly is a file system? The general concept is that the file system provides naming organization. It manages the physical disk layout such as picking a block constituting a file, balancing locality with expandability, and managing free space. It can translate from file name and offset to the actual data block. In a nutshell, it is a servant that manages all the dirty details of communicating the data between system and the hardware in an optimal way which you aren&amp;rsquo;t required to understand so you can go on and do other things with your life. So what are the functionalities of file systems? In general, it provides file name organizations such as directories. It can manage disk layout by picking blocks that constitute a file, balancing locality with expandability, and manage free space. It can translate from file name and offset to the actual data block</description></item><item><title>Disk Introduction</title><link>https://www.bodunhu.com/blog/posts/disk-introduction/</link><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/disk-introduction/</guid><description>This chapter is all about disk. Before we start. We won&amp;rsquo;t go deep into the mechanical part of disk operation; rather we will be focusing on general concept related to disk and algorithms to improve disk performance</description></item><item><title>Virtual Memory Mechanisms</title><link>https://www.bodunhu.com/blog/posts/virtual-memory-mechanisms/</link><pubDate>Thu, 19 Oct 2017 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/virtual-memory-mechanisms/</guid><description>As we can see in the previous post, all allocation algorithms we discussed lead to external fragmentation. As time goes by, external fragmentation is going to get worse and we need solutions for the problem. We can use swap areas to swap out memory onto the disk, or move allocated memory together(a process named memory compaction), leaving empty spaces together. Even these approaches can reduce external fragmentation and allow a higher degree of multiprogramming, they are not perfect.</description></item><item><title>Virtual Memory Overview</title><link>https://www.bodunhu.com/blog/posts/virtual-memory-overview/</link><pubDate>Sun, 08 Oct 2017 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/virtual-memory-overview/</guid><description>I love pointers. Pointer is very a useful feature in programming languages like C/C++. I can pass weird hexadecimal numbers to a function and then it will magically locate where the program is in memory. However, all those values we see are merely virtual addresses, a running program&amp;rsquo;s view of memory in system. Any address we can see while programming user-level programs is a virtual address. It is no more than an illusion of where the data is actually laid out in memory.</description></item></channel></rss>