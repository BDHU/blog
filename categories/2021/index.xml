<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2021 on std::bodun::blog</title><link>https://www.bodunhu.com/blog/categories/2021/</link><description>Recent content in 2021 on std::bodun::blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 23 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bodunhu.com/blog/categories/2021/index.xml" rel="self" type="application/rss+xml"/><item><title>Consistency Models Explained</title><link>https://www.bodunhu.com/blog/posts/consistency-models-explained/</link><pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/consistency-models-explained/</guid><description>In a distributed system, eventual consistency provides a weak guarantee that data updates will be reflected in all nodes eventually. However, the downside of eventual consistency is that clients could potentially observe awkward intermediate states</description></item><item><title>Lamport Distributed Mutual Exclusion</title><link>https://www.bodunhu.com/blog/posts/lamport-distributed-mutual-exclusion/</link><pubDate>Tue, 21 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/lamport-distributed-mutual-exclusion/</guid><description>Normally, having consistent event ordering in a distributed system is hard because we have no common clock. Since we don&amp;rsquo;t have a common clock to measure with, we rely on logical properties of time in the absence of clock. Here we use causality replation between events</description></item><item><title>Specifying Token Ring for Mutual Exclusion</title><link>https://www.bodunhu.com/blog/posts/specifying-token-ring-for-mutual-exclusion/</link><pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/specifying-token-ring-for-mutual-exclusion/</guid><description>Mutual exclusion is a common term appearing frequently in computer sciences. In essence, it&amp;rsquo;s a mechanism of concurrency control allowing exclusive access to some resource (or &amp;ldquo;critical region&amp;rdquo;). Token passing is an algorithm for distributed mutual exclusion and will be our focus in this post</description></item><item><title>Writing Specifications in a Distributed System using Ivy</title><link>https://www.bodunhu.com/blog/posts/writing-specifications-in-a-distributed-system-using-ivy/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/writing-specifications-in-a-distributed-system-using-ivy/</guid><description>Before we jump into how to write specifications in a distributed setting, we first define what a specification is. I take the definition from the magnificent &lt;a href="http://mcmil.net/wordpress/" target="_blank" rel="noopener">Ken McMillan&lt;/a>: a specification is a &lt;em>statement&lt;/em></description></item><item><title>Whiz: Data-Driven Analytics Execution</title><link>https://www.bodunhu.com/blog/posts/whiz-data-driven-analytics-execution/</link><pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/whiz-data-driven-analytics-execution/</guid><description>This paper by &lt;a href="https://utns.cs.utexas.edu/" target="_blank" rel="noopener">UTNS&lt;/a> lab appeared in &lt;a href="https://www.usenix.org/conference/nsdi21" target="_blank" rel="noopener">NSDI 2021&lt;/a>. It presents a data-analytics framework that decouples intermediate data from computations</description></item><item><title>In-Network Aggregation for Shared Machine Learning Clusters</title><link>https://www.bodunhu.com/blog/posts/in-network-aggregation-for-shared-machine-learning-clusters/</link><pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/in-network-aggregation-for-shared-machine-learning-clusters/</guid><description>This &lt;a href="https://proceedings.mlsys.org/paper/2021/file/eae27d77ca20db309e056e3d2dcd7d69-Paper.pdf" target="_blank" rel="noopener">paper&lt;/a> by Nadeen appeared in MLSys 2021. It presents an in-network aggregation framework called &lt;em>PANAMA&lt;/em> for distributed ML training tasks. &lt;em>PANAMA&lt;/em> has two components: (1) an in-network hardware accelerator with support for floating-point gradient aggregation; (2) a domain-specific load-balancing and congestion control protocol</description></item><item><title>What is Memcached</title><link>https://www.bodunhu.com/blog/posts/what-is-memcached/</link><pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/what-is-memcached/</guid><description>Memcached is a high-performance, distributed caching system. Although application-neutral, it&amp;rsquo;s most commonly used to speed up dynamic Web applications by alleviating database load. Memcached is used on LiveJournal, Slashdot, Wikipedia and other high-traffic sites</description></item><item><title>Deploy Hugo Site to GitHub Pages</title><link>https://www.bodunhu.com/blog/posts/deploy-hugo-site-to-github-pages/</link><pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/deploy-hugo-site-to-github-pages/</guid><description>This post assumes the user has already setup two separate repositories: a private repository for Hugo source files, and a public repository for &lt;a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages&lt;/a>.</description></item><item><title>Quantum Search Algorithm</title><link>https://www.bodunhu.com/blog/posts/quantum-search-algorithm/</link><pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/quantum-search-algorithm/</guid><description>This is a comprehensive summary over how Grover&amp;rsquo;s quantum search algorithm works. It explains the three major steps involved in Grover&amp;rsquo;s iteration</description></item><item><title>Quantum State in a Nutshell</title><link>https://www.bodunhu.com/blog/posts/quantum-state-in-a-nutshell/</link><pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/quantum-state-in-a-nutshell/</guid><description>There are thousands of articles trying to explain what exactly a quantum state is. Many of them boiled down to the state of a qubit is 0, 1, or 0 and 1 at the same time</description></item><item><title>Writing in the Sciences - Writing Process</title><link>https://www.bodunhu.com/blog/posts/writing-in-the-sciences-writing-process/</link><pubDate>Mon, 09 Aug 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/writing-in-the-sciences-writing-process/</guid><description>This post covers the topics mentioned in Writing in the Sciences offered on Coursera.
Writing Process ðŸ”—The writing process includes three steps:
Prewriting Collect and organize information Brainstorm take-home messages Work out ideas away from the computer Develop a road map Writing the first draft Putting ideas together in organized prose Revision Read out loud Cut the clutter Verb check Get feedback A lot of people often convolute step 2 and 3.</description></item><item><title>Writing in the Sciences - Structure</title><link>https://www.bodunhu.com/blog/posts/writing-in-the-sciences-structure/</link><pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/writing-in-the-sciences-structure/</guid><description>This post covers how to improve sentence structures, and builds to to writing strong paragraphs. Most contents comes from the &lt;a href="https://www.coursera.org/learn/sciwrite" target="_blank" rel="noopener">Writing in the Sciences&lt;/a> course offered on &lt;a href="https://www.coursera.org/" target="_blank" rel="noopener">Coursera&lt;/a></description></item><item><title>Writing in the Sciences - Verbs</title><link>https://www.bodunhu.com/blog/posts/writing-in-the-sciences-verbs/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/writing-in-the-sciences-verbs/</guid><description>This is an overview of the second chapter of &lt;a href="https://www.coursera.org/learn/sciwrite" target="_blank" rel="noopener">Writing in the Sciences&lt;/a> offered by &lt;a href="https://www.stanford.edu/" target="_blank" rel="noopener">Stanford&lt;/a>. This chapter focuses on writing with strong, active verbs. Lessons include how to</description></item><item><title>Writing in the Sciences - Cut the Clutter</title><link>https://www.bodunhu.com/blog/posts/writing-in-the-sciences-cut-the-clutter/</link><pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/writing-in-the-sciences-cut-the-clutter/</guid><description>This is an overview over the first chapter of Writing in the Sciences offered by Stanford.
The secret of good writing is to strip every sentence to its cleanest components. Every word that serves no function, every long word that could be a short word, every adverb that carries the same meaning that&amp;rsquo;s already in the verb, every passive construction that leaves the reader unsure of who is doing what.</description></item><item><title>Unitary Matrix</title><link>https://www.bodunhu.com/blog/posts/unitary-matrix/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/unitary-matrix/</guid><description>Recently, I was trying to get the hang of quantum computing. I found myself in a position where I forgot most of the linear algebra stuff I&amp;rsquo;ve learned in past semesters. So again, I decide to put them down in hope that some of the knowledge here will stay in my memory a bit longer</description></item><item><title>BGP in a Nutshell</title><link>https://www.bodunhu.com/blog/posts/bgp-in-a-nutshell/</link><pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/bgp-in-a-nutshell/</guid><description>Border Gateway Protocol (BGP) protocol has a very simple purpose: choose the fastest and the most efficient route to deliver a message from one autonomous system (AS) to another. In layman&amp;rsquo;s term, BGP is the GPS for the internet. Many contents here are credit to Prof. Mohamed G. Gouda.
In a nutshell, BGP informs each router \(R\) how to route packets to an IP prefix \(pf\) (i.e. block of IP addresses) that is used in \(AS_i\) different from \(AS_j\), where \(R\) is located:</description></item><item><title>From Autotools to CMake</title><link>https://www.bodunhu.com/blog/posts/from-autotools-to-cmake/</link><pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/from-autotools-to-cmake/</guid><description>Since my paper on GPU benchmarking was published, every once in a while, I got emails asking me why Altis doesn&amp;rsquo;t build on their platforms. It almost always has something to do a small script which is responsible for finding CUDA dependencies. This script is invoked every single time make is executed. For some reason, the regular expression in the script sometimes breaks randomly, depending on the Linux distro, the kernel version, the host architecture, or even the CUDA version.</description></item><item><title>How SAT Solver works</title><link>https://www.bodunhu.com/blog/posts/how-sat-solver-works/</link><pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/how-sat-solver-works/</guid><description>This is a summary over the high-level design of &lt;a href="https://en.wikipedia.org/wiki/Boolean_satisfiability_problem" target="_blank" rel="noopener">SAT solver&lt;/a> covered in Prof. &lt;a href="https://www.cs.utexas.edu/~isil/" target="_blank" rel="noopener">Dillig&lt;/a>&amp;rsquo;s &lt;a href="https://www.cs.utexas.edu/~isil/cs389L/" target="_blank" rel="noopener">Automated Logical Reasoning&lt;/a> class. It&amp;rsquo;s meant to cover the basic steps towards determining whether a given boolean formula is satisfiable or not</description></item><item><title>Experience on Dafny Programming</title><link>https://www.bodunhu.com/blog/posts/experience-on-dafny-programming/</link><pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/experience-on-dafny-programming/</guid><description>Because of Professor Dillig&amp;rsquo;s class, I finally got the chance to try out Dafny, a language made by Microsoft Research, with built-in support for formal specification through preconditions, postconditions, loop invariants and loop variants. I often think, what if we write programs in a verification language, would there be much less bugs and will it make our lives much easier than sitting in front a screen for hours grinding at bugs.</description></item><item><title>Ethereum</title><link>https://www.bodunhu.com/blog/posts/ethereum/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/ethereum/</guid><description>In my previous &lt;a href="https://www.bodunhu.com/blog/blog/posts/reflections-on-my-cs-phd-application-process/">post&lt;/a>, we&amp;rsquo;ve gone over the high-level structure of blockchain and its corresponding attributes. This post is going to cover &lt;a href="https://ethereum.org/en/" target="_blank" rel="noopener">Ethereum&lt;/a> and explore how blockchain can be used not only for money transfer but also application development</description></item><item><title>Reflections on my CS PhD Application Process</title><link>https://www.bodunhu.com/blog/posts/reflections-on-my-cs-phd-application-process/</link><pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/reflections-on-my-cs-phd-application-process/</guid><description>I applied for CS Ph.D. programs this past fall and had interviews with schools from late December all the way to March. Now that the semester has ended, I decided to put down some reflections on this process. This post is not intended to be the most comprehensive CS Ph.D. application tutorial in the world, but merely a half-guide half-memoir of journey towards a PhD. Of course, you should take this post with a grain of salt, since I don&amp;rsquo;t work on admission committees, and am no where near an expert in the application process</description></item><item><title>Blockchain</title><link>https://www.bodunhu.com/blog/posts/blockchain/</link><pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/blockchain/</guid><description>The first time I&amp;rsquo;ve heard the term &amp;lsquo;&amp;lsquo;blockchain&amp;rsquo;&amp;rsquo; was around 2014. Since then, its popularity has grown rapidly. However, I&amp;rsquo;ve never actually understand what blockchain is exactly, until recently. In fact, I didn&amp;rsquo;t really understand the difference between blockchain and bitcoin. For me, blockchain is clubbed with cryptocurrencies. So here is a short summary of what blockchain is and why people use blockchain</description></item><item><title>Hoare Logic</title><link>https://www.bodunhu.com/blog/posts/hoare-logic/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/hoare-logic/</guid><description>Hoare logic forms the basis of all deductive verification. To illustrate Hoare logic, we will first consider a smaller imperative programming language &lt;strong>IMP&lt;/strong></description></item><item><title>Congruence Closure</title><link>https://www.bodunhu.com/blog/posts/congruence-closure/</link><pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate><guid>https://www.bodunhu.com/blog/posts/congruence-closure/</guid><description>This is a summary of how to compute congruence closure. I implemented the algorithm to compute congruence closure and thought I&amp;rsquo;d never forget it. But my memory starts to get blurry just after two days. So I figured I&amp;rsquo;d put things down so I don&amp;rsquo;t have to watch the entire lecture again the next time I need it</description></item></channel></rss>